# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import proto.chess_pb2 as chess__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in chess_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ChessServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FindGame = channel.unary_unary(
                '/chess.ChessService/FindGame',
                request_serializer=chess__pb2.FindGameRequest.SerializeToString,
                response_deserializer=chess__pb2.FindGameResponse.FromString,
                _registered_method=True)
        self.StartGame = channel.unary_unary(
                '/chess.ChessService/StartGame',
                request_serializer=chess__pb2.StartGameRequest.SerializeToString,
                response_deserializer=chess__pb2.StartGameResponse.FromString,
                _registered_method=True)
        self.Move = channel.unary_unary(
                '/chess.ChessService/Move',
                request_serializer=chess__pb2.MoveRequest.SerializeToString,
                response_deserializer=chess__pb2.MoveResponse.FromString,
                _registered_method=True)
        self.Forfeit = channel.unary_unary(
                '/chess.ChessService/Forfeit',
                request_serializer=chess__pb2.ForfeitRequest.SerializeToString,
                response_deserializer=chess__pb2.ForfeitResponse.FromString,
                _registered_method=True)


class ChessServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FindGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Move(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Forfeit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChessServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FindGame': grpc.unary_unary_rpc_method_handler(
                    servicer.FindGame,
                    request_deserializer=chess__pb2.FindGameRequest.FromString,
                    response_serializer=chess__pb2.FindGameResponse.SerializeToString,
            ),
            'StartGame': grpc.unary_unary_rpc_method_handler(
                    servicer.StartGame,
                    request_deserializer=chess__pb2.StartGameRequest.FromString,
                    response_serializer=chess__pb2.StartGameResponse.SerializeToString,
            ),
            'Move': grpc.unary_unary_rpc_method_handler(
                    servicer.Move,
                    request_deserializer=chess__pb2.MoveRequest.FromString,
                    response_serializer=chess__pb2.MoveResponse.SerializeToString,
            ),
            'Forfeit': grpc.unary_unary_rpc_method_handler(
                    servicer.Forfeit,
                    request_deserializer=chess__pb2.ForfeitRequest.FromString,
                    response_serializer=chess__pb2.ForfeitResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chess.ChessService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('chess.ChessService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChessService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FindGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chess.ChessService/FindGame',
            chess__pb2.FindGameRequest.SerializeToString,
            chess__pb2.FindGameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chess.ChessService/StartGame',
            chess__pb2.StartGameRequest.SerializeToString,
            chess__pb2.StartGameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Move(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chess.ChessService/Move',
            chess__pb2.MoveRequest.SerializeToString,
            chess__pb2.MoveResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Forfeit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chess.ChessService/Forfeit',
            chess__pb2.ForfeitRequest.SerializeToString,
            chess__pb2.ForfeitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ClientCallbackStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BoardUpdate = channel.unary_unary(
                '/chess.ClientCallback/BoardUpdate',
                request_serializer=chess__pb2.BoardUpdateRequest.SerializeToString,
                response_deserializer=chess__pb2.BoardUpdateResponse.FromString,
                _registered_method=True)


class ClientCallbackServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BoardUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientCallbackServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BoardUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.BoardUpdate,
                    request_deserializer=chess__pb2.BoardUpdateRequest.FromString,
                    response_serializer=chess__pb2.BoardUpdateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chess.ClientCallback', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('chess.ClientCallback', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ClientCallback(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BoardUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chess.ClientCallback/BoardUpdate',
            chess__pb2.BoardUpdateRequest.SerializeToString,
            chess__pb2.BoardUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
